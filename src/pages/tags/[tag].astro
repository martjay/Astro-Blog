---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import PostCard from '../../components/PostCard.astro';

export const prerender = true;

export async function getStaticPaths() {
  try {
    const posts = await getCollection('blog');
    const tags = [...new Set(posts.flatMap(post => post.data.tags))];
    
    return tags.map(tag => {
      const filteredPosts = posts
        .filter(post => !post.data.draft && post.data.tags.includes(tag))
        .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
      return {
        params: { tag },
        props: { tag, posts: filteredPosts }
      };
    });
  } catch (error) {
    console.error('Error in getStaticPaths:', error);
    throw error;
  }
}

const { tag, posts } = Astro.props;

// 获取相关标签（与当前标签共现的标签）
const relatedTags = [...new Set(posts.flatMap(post => 
  post.data.tags.filter(t => t !== tag)
))].slice(0, 10);

// 按时间分组文章
const postsByYear = posts.reduce((acc, post) => {
  const year = post.data.pubDate.getFullYear();
  if (!acc[year]) {
    acc[year] = [];
  }
  acc[year].push(post);
  return acc;
}, {} as Record<string, typeof posts>);

const years = Object.keys(postsByYear).sort((a, b) => Number(b) - Number(a));
---

<BaseLayout title={`#${tag} - 标签`}>
  <!-- Hero Section -->
  <section class="relative overflow-hidden bg-gradient-to-br from-blue-600 to-purple-700 dark:from-blue-900 dark:to-purple-900">
    <div class="absolute inset-0">
      <div class="absolute inset-0 bg-gradient-to-br from-blue-600/90 to-purple-700/90 dark:from-blue-900/90 dark:to-purple-900/90"></div>
      <div class="absolute inset-0 bg-grid-white/[0.05] bg-grid-12"></div>
    </div>
    <div class="container relative mx-auto px-4 py-16">
      <div class="max-w-3xl mx-auto text-center">
        <h1 class="text-4xl md:text-5xl font-bold text-white mb-6 animate-fade-in">
          #{tag}
        </h1>
        <p class="text-xl text-white/80 mb-8 animate-fade-in animation-delay-200">
          共 {posts.length} 篇文章
        </p>
        
        {relatedTags.length > 0 && (
          <div class="flex flex-wrap justify-center gap-3 animate-fade-in animation-delay-300">
            {relatedTags.map(relatedTag => (
              <a
                href={`/tags/${relatedTag}`}
                class="px-3 py-1 bg-white/10 backdrop-blur-sm rounded-full text-white/90 text-sm hover:bg-white/20 transition-colors"
              >
                #{relatedTag}
              </a>
            ))}
          </div>
        )}
      </div>
    </div>
  </section>

  <!-- Content Section -->
  <section class="py-16 bg-gray-50 dark:bg-gray-900">
    <div class="container mx-auto px-4">
      <div class="max-w-4xl mx-auto">
        {years.map(year => (
          <div class="mb-16 last:mb-0 animate-fade-in">
            <div class="flex items-center gap-4 mb-8">
              <h2 class="text-4xl font-bold gradient-text">{year}</h2>
              <div class="flex-grow border-t border-gray-200 dark:border-gray-700"></div>
              <span class="text-gray-500 dark:text-gray-400">
                {postsByYear[year].length} 篇文章
              </span>
            </div>
            <div class="grid gap-8 md:grid-cols-2">
              {postsByYear[year].map(post => (
                <article class="group bg-white dark:bg-gray-800 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300">
                  <a href={`/blog/${post.slug}`} class="block p-6">
                    <div class="flex justify-between items-start gap-4 mb-4">
                      <h3 class="text-xl font-bold group-hover:text-blue-500 transition-colors">
                        {post.data.title}
                      </h3>
                      <time class="text-sm text-gray-500 dark:text-gray-400 whitespace-nowrap">
                        {post.data.pubDate.toLocaleDateString('zh-CN')}
                      </time>
                    </div>
                    <p class="text-gray-600 dark:text-gray-400 mb-4 line-clamp-2">
                      {post.data.description}
                    </p>
                    <div class="flex flex-wrap gap-2">
                      {post.data.tags.filter(t => t !== tag).map(t => (
                        <span class="px-2 py-1 text-sm bg-gray-100 dark:bg-gray-700 rounded-full">
                          #{t}
                        </span>
                      ))}
                    </div>
                  </a>
                </article>
              ))}
            </div>
          </div>
        ))}

        {posts.length === 0 && (
          <div class="text-center py-16">
            <div class="inline-block p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
              <svg class="w-16 h-16 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
              </svg>
              <h2 class="text-2xl font-bold mb-2">暂无文章</h2>
              <p class="text-gray-600 dark:text-gray-400">
                这个标签下还没有任何文章，敬请期待...
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  </section>
</BaseLayout>

<style>
  /* 网格背景 */
  .bg-grid-white {
    mask-image: linear-gradient(to bottom, transparent, black, transparent);
  }
  .bg-grid-12 {
    background-image: 
      linear-gradient(to right, rgb(255 255 255 / 0.05) 1px, transparent 1px),
      linear-gradient(to bottom, rgb(255 255 255 / 0.05) 1px, transparent 1px);
    background-size: 24px 24px;
  }

  /* 动画 */
  .animate-fade-in {
    animation: fadeIn 0.8s ease-out forwards;
  }

  .animation-delay-200 {
    animation-delay: 0.2s;
  }

  .animation-delay-300 {
    animation-delay: 0.3s;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* 渐变文本 */
  .gradient-text {
    @apply bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-purple-600;
  }

  /* 响应式调整 */
  @media (max-width: 768px) {
    .container {
      padding-left: 1rem;
      padding-right: 1rem;
    }
  }
</style> 